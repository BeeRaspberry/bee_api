# The flow is:
#  - all branches:
#      - install dependencices
#      - lint code
#      - run tests
#      - publish test results
#      - build docker image
#      - scan docker image for vulnerabilities
#  - master branch: Includes all the steps above
#      - checks to see if VERSION file was increment, if not increments
#        and pushes the file to master
#      - push the docker image to Docker Hub
#      - notify 'helm' repo of the changes

name: build

on: 
  push:
    paths-ignore:
    - 'README.md'
    - 'hooks/**'
    - 'tests/**'
#    - '.github/workflows/**'

jobs:    
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test
      run: |
        pip install -r test_requirements.txt
        coverage run -m pytest --junitxml=test-results/test-results.xml

    - name: Generate reports
      run: |
        coverage report
        coverage xml -o test-results/coverage.xml
        coverage html

    - name: Publish Report
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: test-results/coverage.xml

  publish_image:
    needs: build_test
    runs-on: ubuntu-latest
    env:
      REGISTRY: beeraspberry/bee-api

    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Build image
      run: |
        docker build . --tag "$REGISTRY/bee-api:latest"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '$REGISTRY:latest'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        ignore-unfixed: true
        severity: 'LOW,MEDIUM,HIGH,CRITICAL'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'

# Following logic updates the value in VERSION automatically, on 'master'
# Assume since the developer didn't change the version then this is a minor change.
# Increment by one, and set patch to 0. 
    - name: Increment Version - if same as prior commit
      run: |
        DIFF=$(git diff HEAD^ HEAD VERSION)
        if [[ -z "$DIFF" ]]; then
          IFS='.'; read -r -a array <<< "$(cat VERSION)"
          CNT="${array[1]}"
          ((CNT++))
          echo "${array[0]}.${CNT}.0" >VERSION
          echo "VERSION_CHANGE=1" >> $GITHUB_ENV
        fi

    - name: Commit Updated Version File
      if: env.VERSION_CHANGE == 1
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config --local user.name ${GITHUB_ACTOR}
        git add VERSION
        git commit -m "Updated VERSION file"
          
    - name: Push changes to main
      if: env.VERSION_CHANGE == 1
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        force: true

    - name: Publish to Registry
      run: |
        API_VERSION=$(cat VERSION)
        docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
        docker tag $REGISTRY:latest $REGISTRY:${API_VERSION}
        docker push $REGISTRY --all-tags

    - name: Notify Helm Chart Repo of the Commit
      run: |
        API_VERSION=$(cat VERSION)
        curl -X POST https://api.github.com/repos/BeeRaspberry/helm-charts/dispatches \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        -H 'Content-Type: application/json' \
        -u ${{ secrets.ACCESS_TOKEN_REPO }} \
        --data '{"event_type": "version_change", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'", "version": "'${API_VERSION}'" }}'
